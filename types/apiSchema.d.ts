/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/team': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 팀 모집글 전체 조회 */
    get: operations['getTeamList']
    put?: never
    /** 팀 모집글 등록 */
    post: operations['createTeam']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/team/{teamId}/add': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** 팀 멤버 추가 */
    post: operations['addMemberToTeam']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/likes': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** 좋아요 */
    post: operations['addLike']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/community': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 커뮤니티 글 전체 조회 */
    get: operations['getCommunityList']
    put?: never
    /** 커뮤니티 글 등록 */
    post: operations['createCommunity']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/auth/sign-up': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** 회원 가입 */
    post: operations['createMember']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/auth/sign-in': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** 로그인 */
    post: operations['signIn']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/test': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Post Test */
    post: operations['Test']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/refresh': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['createRefreshToken']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/recreate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['recreateAccessToken']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/access': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['createAccessToken']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/team/{teamId}/close': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** 팀 모집 마감 */
    patch: operations['closeRecruitment']
    trace?: never
  }
  '/v1/community/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 커뮤니티 글 상세 조회 */
    get: operations['getCommunityDetail']
    put?: never
    post?: never
    /** 커뮤니티 글 삭제 */
    delete: operations['deleteCommunity']
    options?: never
    head?: never
    /** 커뮤니티 글 수정 */
    patch: operations['updateCommunity']
    trace?: never
  }
  '/validate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['validateToken']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/team/{teamId}/search-members': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 멤버 리스트 검색 */
    get: operations['searchMembers']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/team/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 팀 모집글 상세 조회 */
    get: operations['getTeamDetail']
    put?: never
    post?: never
    /** 팀 모집글 삭제 */
    delete: operations['deleteTeam']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/community/top5': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 인기 커뮤니티 Top 5 유저 조회 (좋아요 수 기준) */
    get: operations['getTop5UsersByTotalLikes']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    TeamCreateRequest: {
      /**
       * @description 팀 제목
       * @example 팀 제목1
       */
      teamTitle?: string
      /**
       * @description 팀 내용
       * @example 팀 모집공고 내용1
       */
      teamContent?: string
      /**
       * @description 팀 모집 유형
       * @example STUDY
       */
      teamType?: string
      /**
       * @description 팀 모집 포지션
       * @example BACKEND
       */
      teamPosition?: string
      /**
       * Format: int64
       * @description 팀 모집 인원
       * @example 1
       */
      teamRecruitmentNum?: number
      /**
       * @description 기술 스택
       * @example [
       *       "Java",
       *       "Spring",
       *       "AWS"
       *     ]
       */
      teamTechStack?: string[]
      /**
       * @description 태그
       * @example [
       *       "Remote",
       *       "Full-Time",
       *       "Flexible"
       *     ]
       */
      teamTags?: string[]
    }
    ApiResponseObject: {
      isSuccess?: boolean
      code?: string
      message?: string
      result?: Record<string, never>
    }
    TeamAddMemberRequest: {
      /**
       * Format: int64
       * @description 추가할 멤버 id
       * @example 1
       */
      memberId?: number
    }
    LikeRequest: {
      /**
       * Format: int64
       * @description 좋아요하는 게시글의 id
       * @example 1
       */
      likeId?: number
      /**
       * @description 타입
       * @example COMMUNITY
       */
      likeType?: string
    }
    CommunityCreateRequest: {
      /**
       * @description 커뮤니티 카테고리
       * @example SKILL
       */
      communityCategory?: string
      /**
       * @description 커뮤니티 제목
       * @example 스프링부트 너무 어려워요
       */
      communityTitle?: string
      /**
       * @description 커뮤니티 내용
       * @example 인기유저 5명을 조회하려고 하는데 redis로 캐싱을 하는게 좋을까요 아니면 스케줄링으로 처리하는게 좋을까요
       */
      communityContent?: string
      /**
       * @description 커뮤니티 AI 답변 동의 여부
       * @example false
       */
      communityAI?: boolean
    }
    SignUpRequest: {
      /**
       * @description 회원 이메일
       * @example xxx@naver.com
       */
      email: string
      /**
       * @description 회원 비밀번호
       * @example bboggo1234!
       */
      password: string
      /**
       * @description 회원 이름
       * @example BBOGGO
       */
      name: string
      /**
       * @description 깃허브
       * @example bboggo
       */
      gitHub?: string
    }
    SignInRequest: {
      /**
       * @description 회원 이메일
       * @example xxx@naver.com
       */
      email?: string
      /**
       * @description 회원 비밀번호
       * @example bboggo1234!
       */
      password?: string
    }
    ApiResponseString: {
      isSuccess?: boolean
      code?: string
      message?: string
      result?: string
    }
    CommunityUpdateRequest: {
      /**
       * @description 커뮤니티 카테고리
       * @example CAREER
       */
      communityCategory?: string
      /**
       * @description 커뮤니티 제목
       * @example 커뮤니티 제목1
       */
      communityTitle?: string
      /**
       * @description 커뮤니티 내용
       * @example 커뮤니티 내용1
       */
      communityContent?: string
    }
  }
  responses: never
  parameters: never
  requestBodies: {
    MultipartFile: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          file?: string
        }
      }
    }
  }
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  getTeamList: {
    parameters: {
      query?: {
        searchTerm?: string
        teamType?: 'STUDY' | 'PROJECT' | 'MENTORING'
        positions?: string[]
        techStacks?: string[]
        sortBy?: string
        teamIsActive?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseObject']
        }
      }
    }
  }
  createTeam: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TeamCreateRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseObject']
        }
      }
    }
  }
  addMemberToTeam: {
    parameters: {
      query?: never
      header?: never
      path: {
        teamId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TeamAddMemberRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseObject']
        }
      }
    }
  }
  addLike: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['LikeRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseObject']
        }
      }
    }
  }
  getCommunityList: {
    parameters: {
      query?: {
        category?: 'SKILL' | 'CAREER' | 'OTHER'
        searchTerm?: string
        sortBy?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseObject']
        }
      }
    }
  }
  createCommunity: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CommunityCreateRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseObject']
        }
      }
    }
  }
  createMember: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SignUpRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseObject']
        }
      }
    }
  }
  signIn: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SignInRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseObject']
        }
      }
    }
  }
  Test: {
    parameters: {
      query: {
        test: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseString']
        }
      }
    }
  }
  createRefreshToken: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': string
        }
      }
    }
  }
  recreateAccessToken: {
    parameters: {
      query: {
        oldAccessToken: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': string
        }
      }
    }
  }
  createAccessToken: {
    parameters: {
      query: {
        userSpecification: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': string
        }
      }
    }
  }
  closeRecruitment: {
    parameters: {
      query?: never
      header?: never
      path: {
        teamId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseObject']
        }
      }
    }
  }
  getCommunityDetail: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseObject']
        }
      }
    }
  }
  deleteCommunity: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseObject']
        }
      }
    }
  }
  updateCommunity: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CommunityUpdateRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseObject']
        }
      }
    }
  }
  validateToken: {
    parameters: {
      query: {
        token: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': string
        }
      }
    }
  }
  searchMembers: {
    parameters: {
      query?: {
        nickname?: string
      }
      header?: never
      path: {
        teamId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseObject']
        }
      }
    }
  }
  getTeamDetail: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseObject']
        }
      }
    }
  }
  deleteTeam: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseObject']
        }
      }
    }
  }
  getTop5UsersByTotalLikes: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseObject']
        }
      }
    }
  }
}
