/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/team': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 팀 모집글 전체 조회 */
    get: operations['getTeamList']
    put?: never
    /** 팀 모집글 등록 */
    post: operations['createTeam']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/team/{teamId}/add': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** 팀 멤버 추가 */
    post: operations['addMemberToTeam']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/portfolio': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 포트폴리오 전체 리스트 조회 */
    get: operations['getPortfolioList']
    put?: never
    /** 포트폴리오 글 등록 */
    post: operations['createPortfolio']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/likes': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** 좋아요 */
    post: operations['addLike']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/community': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 커뮤니티 글 전체 조회 */
    get: operations['getCommunityList']
    put?: never
    /** 커뮤니티 글 등록 */
    post: operations['createCommunity']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/auth/sign-up': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** 회원 가입 */
    post: operations['createMember']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/auth/sign-in': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** 로그인 */
    post: operations['signIn']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/test': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Post Test */
    post: operations['Test']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/refresh': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['createRefreshToken']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/recreate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['recreateAccessToken']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/access': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['createAccessToken']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/team/{teamId}/close': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** 팀 모집 마감 */
    patch: operations['closeRecruitment']
    trace?: never
  }
  '/v1/my-page/profile': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 마이페이지 프로필 조회 */
    get: operations['getProfileInfo']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** 마이페이지 프로필 저장 */
    patch: operations['updateProfileInfo']
    trace?: never
  }
  '/v1/community/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 커뮤니티 글 상세 조회 */
    get: operations['getCommunityDetail']
    put?: never
    post?: never
    /** 커뮤니티 글 삭제 */
    delete: operations['deleteCommunity']
    options?: never
    head?: never
    /** 커뮤니티 글 수정 */
    patch: operations['updateCommunity']
    trace?: never
  }
  '/validate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['validateToken']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/team/{teamId}/search-members': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 멤버 리스트 검색 */
    get: operations['searchMembers']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/team/{teamId}/members': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 팀 멤버 전체 조회 */
    get: operations['getTeamMembers']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/team/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 팀 모집글 상세 조회 */
    get: operations['getTeamDetail']
    put?: never
    post?: never
    /** 팀 모집글 삭제 */
    delete: operations['deleteTeam']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/community/top5': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 인기 커뮤니티 Top 5 유저 조회 (좋아요 수 기준) */
    get: operations['getTop5UsersByTotalLikes']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/auth': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 로그인한 유저 조회 */
    get: operations['getMemberInfo']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/team/{teamId}/members/{memberId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** 팀 멤버 삭제 */
    delete: operations['deleteTeamMember']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    TeamCreateRequest: {
      /**
       * @description 팀 제목
       * @example 팀 제목1
       */
      teamTitle: string
      /**
       * @description 팀 내용
       * @example 팀 모집공고 내용1
       */
      teamContent: string
      /**
       * @description 팀 모집 유형
       * @example STUDY
       * @enum {string}
       */
      teamType: 'STUDY' | 'PROJECT' | 'MENTORING'
      /**
       * @description 팀 모집 포지션
       * @example BACKEND
       */
      teamPosition: string
      /**
       * Format: int64
       * @description 팀 모집 인원
       * @example 1
       */
      teamRecruitmentNum: number
      /**
       * @description 기술 스택
       * @example [
       *       "Java",
       *       "Spring",
       *       "AWS"
       *     ]
       */
      teamTechStack?: string[]
      /**
       * @description 태그
       * @example [
       *       "태그1",
       *       "태그2",
       *       "태그3"
       *     ]
       */
      teamTags?: string[]
    }
    ApiResponseTeamCreateResponse: {
      isSuccess?: boolean
      code?: string
      message?: string
      result?: components['schemas']['TeamCreateResponse']
    }
    TeamCreateResponse: {
      /**
       * Format: int64
       * @description 팀 모집 id
       * @example 1
       */
      id?: number
      /**
       * @description 팀 모집 제목
       * @example 팀 모집 제목입니다.
       */
      teamTitle?: string
      /**
       * @description 팀 모집 내용
       * @example 팀 모집 내용입니다.
       */
      teamContent?: string
      /**
       * @description 팀 모집 타입
       * @example STUDY
       * @enum {string}
       */
      teamType?: 'STUDY' | 'PROJECT' | 'MENTORING'
      /**
       * @description 팀 모집 포지션
       * @example BACKEND
       */
      teamPosition?: string
      /**
       * Format: int64
       * @description 팀 모집 인원
       * @example 1
       */
      teamRecruitmentNum?: number
      /**
       * @description 기술 스택
       * @example [
       *       "Java",
       *       "Spring",
       *       "AWS"
       *     ]
       */
      teamTechStack?: string[]
      /**
       * @description 태그
       * @example [
       *       "태그1",
       *       "태그2",
       *       "태그3"
       *     ]
       */
      teamTags?: string[]
      /**
       * Format: date-time
       * @description 작성시간
       */
      createdAt?: string
    }
    TeamAddMemberRequest: {
      /**
       * Format: int64
       * @description 추가할 멤버 id
       * @example 1
       */
      memberId: number
    }
    ApiResponseTeamAddMemberResponse: {
      isSuccess?: boolean
      code?: string
      message?: string
      result?: components['schemas']['TeamAddMemberResponse']
    }
    TeamAddMemberResponse: {
      /**
       * Format: int64
       * @description 팀원 추가 id
       * @example 1
       */
      id?: number
      /**
       * Format: int64
       * @description 팀 모집 id
       * @example 1
       */
      teamId?: number
      /**
       * Format: int64
       * @description 추가된 멤버 id
       * @example 1
       */
      memberId?: number
    }
    /** @description 대외활동 관련 정보 */
    ActivityAwardRequest: {
      awardType: 'ActivityAwardRequest'
    } & (Omit<components['schemas']['AwardRequest'], 'awardType'> & {
      /**
       * @description 활동명
       * @example 글로벌 리더십 프로그램
       */
      activityName?: string
      /**
       * Format: date
       * @description 활동 시작일
       * @example 2024-08-01
       */
      startDate?: string
      /**
       * Format: date
       * @description 활동 종료일
       * @example 2024-11-30
       */
      endDate?: string
    })
    /** @description 수상/자격증/어학/대외활동 Request */
    AwardRequest: {
      /** @enum {string} */
      awardType?: 'COMPETITION' | 'CERTIFICATE' | 'LANGUAGE' | 'ACTIVITY'
    }
    /** @description 포트폴리오 경력 리스트 */
    CareerRequest: {
      /**
       * @description 회사명
       * @example oo회사
       */
      companyName?: string
      /**
       * @description 포지션
       * @example 백엔드
       */
      position?: string
      /**
       * Format: date
       * @description 입사일
       * @example 2024-08-01
       */
      startDate?: string
      /**
       * Format: date
       * @description 퇴사일
       * @example 2024-08-01
       */
      endDate?: string
      /**
       * @description 재직여부
       * @example true
       */
      isCurrent?: boolean
      /**
       * @description 직급(직위)
       * @example 과장
       */
      level?: string
      /**
       * @description 업무 설명
       * @example 업무 설명 내용
       */
      description?: string
    }
    /** @description 자격증 관련 정보 */
    CertificationAwardRequest: {
      awardType: 'CertificationAwardRequest'
    } & (Omit<components['schemas']['AwardRequest'], 'awardType'> & {
      /**
       * @description 자격증명
       * @example 정보처리기사
       */
      certificateName?: string
      /**
       * @description 발행처
       * @example 한국산업인력공단
       */
      issuer?: string
      /**
       * Format: date
       * @description 합격년월
       * @example 2024-11-25
       */
      passingDate?: string
    })
    /** @description 공모전 관련 정보 */
    CompetitionAwardRequest: {
      awardType: 'CompetitionAwardRequest'
    } & (Omit<components['schemas']['AwardRequest'], 'awardType'> & {
      /**
       * @description 수상 및 공모전명
       * @example 정보통신공학과 학술제
       */
      competitionName?: string
      /**
       * @description 주최기관
       * @example 명지전문대학 정보통신공학과
       */
      hostingInstitution?: string
      /**
       * Format: date
       * @description 공모일
       * @example 2023-11-01
       */
      competitionDate?: string
    })
    /** @description 포트폴리오 학력 리스트 */
    EducationRequest: {
      /**
       * @description 학력구분
       * @example 대학(2,3년제)
       */
      level?: string
      /**
       * @description 학교명
       * @example 명지전문대학
       */
      institutionName?: string
      /**
       * @description 전공
       * @example 정보통신공학과
       */
      major?: string
      /**
       * Format: date
       * @description 입학일
       * @example 2020-03-02
       */
      admissionDate?: string
      /**
       * Format: date
       * @description 졸업일
       * @example 2024-02-27
       */
      graduationDate?: string
      /**
       * @description 졸업여부선택
       * @example 졸업
       */
      graduationStatus?: string
      /**
       * @description 편입여부
       * @example false
       */
      isTransfer?: string
      /**
       * Format: double
       * @description 학점
       * @example 4.25
       */
      grade?: number
      /**
       * Format: double
       * @description 기준학점
       * @example 4.5
       */
      gradeScale?: number
    }
    /** @description 어학 관련 정보 */
    LanguageAwardRequest: {
      awardType: 'LanguageAwardRequest'
    } & (Omit<components['schemas']['AwardRequest'], 'awardType'> & {
      /**
       * @description 언어
       * @example 영어
       */
      language?: string
      /**
       * @description 시험명
       * @example TOEIC
       */
      testName?: string
      /**
       * @description 점수
       * @example 900
       */
      score?: string
      /**
       * Format: date
       * @description 취득일
       * @example 2022-08-15
       */
      obtainedDate?: string
    })
    /** @description 포트폴리오 링크 리스트 */
    LinkRequest: {
      /**
       * @description 링크 타입
       * @example github
       */
      type?: string
      /**
       * @description url
       * @example https://github.com/bboggo
       */
      url?: string
    }
    PortfolioCreateRequest: {
      /**
       * @description 포트폴리오 제목
       * @example 김민지의 포트폴리오~~
       */
      portTitle: string
      /**
       * @description 포트폴리오 내용
       * @example 마크다운 텍스트 부분
       */
      portContent: string
      /**
       * @description 백엔드
       * @example 포지션
       */
      portPosition: string
      /**
       * @description 기술 스택
       * @example [
       *       "Spring",
       *       "Java",
       *       "MySQL",
       *       "Docker"
       *     ]
       */
      techStacks: string[]
      /** @example [
       *       "태그1",
       *       "태그2",
       *       "태그3",
       *       "태그4"
       *     ] */
      tags: string[]
      /**
       * @description 포트폴리오 이미지 url
       * @default default_image_url
       * @example 이미지url
       */
      portImageUrl: string
      /** @description 포트폴리오 링크 리스트 */
      links?: components['schemas']['LinkRequest'][]
      /** @description 포트폴리오 학력 리스트 */
      educations?: components['schemas']['EducationRequest'][]
      /** @example [
       *       {
       *         "awardType": "ACTIVITY",
       *         "activityName": "글로벌 리더십 프로그램",
       *         "startDate": "2024-08-01",
       *         "endDate": "2024-11-30"
       *       },
       *       {
       *         "awardType": "CERTIFICATE",
       *         "certificateName": "정보처리기사",
       *         "issuer": "한국산업인력공단",
       *         "passingDate": "2024-11-25"
       *       },
       *       {
       *         "awardType": "COMPETITION",
       *         "competitionName": "정보통신공학과 학술제",
       *         "hostingInstitution": "명지전문대학 정보통신공학과",
       *         "competitionDate": "2023-11-01"
       *       },
       *       {
       *         "awardType": "LANGUAGE",
       *         "language": "영어",
       *         "testName": "TOEIC",
       *         "score": "900",
       *         "obtainedDate": "2022-08-15"
       *       }
       *     ] */
      awards?: (
        | components['schemas']['AwardRequest']
        | components['schemas']['ActivityAwardRequest']
        | components['schemas']['CertificationAwardRequest']
        | components['schemas']['CompetitionAwardRequest']
        | components['schemas']['LanguageAwardRequest']
      )[]
      /** @description 포트폴리오 경력 리스트 */
      careers?: components['schemas']['CareerRequest'][]
    }
    ApiResponsePortCreateResponse: {
      isSuccess?: boolean
      code?: string
      message?: string
      result?: components['schemas']['PortCreateResponse']
    }
    /** @description 수상 및 기타 정보 리스트 */
    AwardResponse: {
      /**
       * Format: int64
       * @description 포트폴리오-수상 및 기타 활동 id
       * @example 1
       */
      id?: number
      /**
       * @description 수상/자격증/어학/대외활동 유형
       * @example COMPETITION
       * @enum {string}
       */
      awardType?: 'COMPETITION' | 'CERTIFICATE' | 'LANGUAGE' | 'ACTIVITY'
      /**
       * Format: int32
       * @description 정렬 순서
       * @example 1
       */
      orderIndex?: number
    }
    /** @description 경력 리스트 */
    CareerResponse: {
      /**
       * Format: int64
       * @description 경력 ID
       * @example 1
       */
      id?: number
      /**
       * @description 회사명
       * @example Google
       */
      companyName?: string
      /**
       * Format: int32
       * @description 정렬 순서
       * @example 1
       */
      orderIndex?: number
      /**
       * @description 직위
       * @example 백엔
       */
      position?: string
      /**
       * Format: date
       * @description 입사일
       * @example 2024-08-01
       */
      startDate?: string
      /**
       * Format: date
       * @description 퇴사일
       * @example 2024-08-01
       */
      endDate?: string
      /**
       * @description 재직 중 여부
       * @example true
       */
      isCurrent?: boolean
      /**
       * @description 주요 업무
       * @example Backend 개발 및 데이터베이스 설계
       */
      description?: string
    }
    /** @description 학력 리스트 */
    EducationResponse: {
      /**
       * Format: int64
       * @description 포트폴리오-학력 id
       * @example 1
       */
      id?: number
      /**
       * @description 학력구분
       * @example 대학(2,3년제)
       */
      level?: string
      /**
       * @description 학교명
       * @example 명지전문대학
       */
      institutionName?: string
      /**
       * @description 전공
       * @example 정보통신공학과
       */
      major?: string
      /**
       * Format: date
       * @description 입학일
       * @example 2020-03-02
       */
      admissionDate?: string
      /**
       * Format: date
       * @description 졸업일
       * @example 2024-02-27
       */
      graduationDate?: string
      /**
       * @description 졸업여부선택
       * @example 졸업
       */
      graduationStatus?: string
      /**
       * @description 편입여부
       * @example false
       */
      isTransfer?: boolean
      /**
       * Format: double
       * @description 학점
       * @example 4.25
       */
      grade?: number
      /**
       * Format: double
       * @description 기준학점
       * @example 4.5
       */
      gradeScale?: number
      /**
       * Format: int32
       * @description 정렬 순서
       * @example 1
       */
      orderIndex?: number
    }
    /** @description 포트폴리오 링크 리스트 */
    LinkResponse: {
      /**
       * @description 링크 타입
       * @example github
       */
      type?: string
      /**
       * @description url
       * @example https://github.com/bboggo
       */
      url?: string
      /**
       * Format: int32
       * @description 정렬 순서
       * @example 1
       */
      orderIndex?: number
    }
    PortCreateResponse: {
      /**
       * Format: int64
       * @description 커뮤니티 ID
       * @example 1
       */
      id?: number
      /**
       * Format: int64
       * @description 작성자 ID
       * @example 1
       */
      member?: number
      /**
       * @description 포트폴리오 제목
       * @example 김민지의 포트폴리오~~
       */
      portTitle?: string
      /**
       * @description 포트폴리오 내용
       * @example 포트폴리오 내용~~
       */
      portContent?: string
      /**
       * @description 포지션
       * @example 포지션
       */
      portPosition?: string
      /** @example [
       *       "스택1",
       *       "스택2",
       *       "스택3",
       *       "스택4"
       *     ] */
      techStacks?: string[]
      /** @example [
       *       "태그1",
       *       "태그2",
       *       "태그3",
       *       "태그4"
       *     ] */
      tags?: string[]
      /**
       * @description 포트폴리오 이미지 url
       * @example 이미지url
       */
      portImageUrl?: string
      /**
       * Format: date-time
       * @description 작성시간
       */
      createdAt?: string
      /** @description 포트폴리오 링크 리스트 */
      links?: components['schemas']['LinkResponse'][]
      /** @description 학력 리스트 */
      educations?: components['schemas']['EducationResponse'][]
      /** @description 수상 및 기타 정보 리스트 */
      awards?: components['schemas']['AwardResponse'][]
      /** @description 경력 리스트 */
      careers?: components['schemas']['CareerResponse'][]
    }
    LikeRequest: {
      /**
       * Format: int64
       * @description 좋아요하는 게시글의 id
       * @example 1
       */
      likeId: number
      /**
       * @description 타입
       * @example COMMUNITY
       * @enum {string}
       */
      likeType: 'COMMUNITY' | 'TEAM' | 'PORTFOLIO' | 'PROJECT'
    }
    ApiResponseLikeResponse: {
      isSuccess?: boolean
      code?: string
      message?: string
      result?: components['schemas']['LikeResponse']
    }
    LikeResponse: Record<string, never>
    CommunityCreateRequest: {
      /**
       * @description 커뮤니티 카테고리
       * @example SKILL
       * @enum {string}
       */
      communityCategory: 'SKILL' | 'CAREER' | 'OTHER'
      /**
       * @description 커뮤니티 제목
       * @example 스프링부트 너무 어려워요
       */
      communityTitle: string
      /**
       * @description 커뮤니티 내용
       * @example 인기유저 5명을 조회하려고 하는데 redis로 캐싱을 하는게 좋을까요 아니면 스케줄링으로 처리하는게 좋을까요
       */
      communityContent: string
      /**
       * @description 커뮤니티 답변 동의 여부
       * @example true
       */
      isComment?: boolean
    }
    ApiResponseCommunityCreateResponse: {
      isSuccess?: boolean
      code?: string
      message?: string
      result?: components['schemas']['CommunityCreateResponse']
    }
    CommunityCreateResponse: {
      /**
       * Format: int64
       * @description 커뮤니티 ID
       * @example 1
       */
      id?: number
      /**
       * @description 커뮤니티 카테고리
       * @example SKILL
       * @enum {string}
       */
      communityCategory?: 'SKILL' | 'CAREER' | 'OTHER'
      /**
       * @description 커뮤니티 제목
       * @example 커뮤니티 제목 부분입니다.
       */
      communityTitle?: string
      /**
       * @description 커뮤니티 내용
       * @example 커뮤니티 내용 부분입니다.
       */
      communityContent?: string
      /**
       * Format: int64
       * @description 작성자 ID
       * @example 1
       */
      member?: number
      /**
       * @description 커뮤니티 답변 동의 여부
       * @example true
       */
      isComment?: boolean
      /**
       * Format: date-time
       * @description 작성시간
       */
      createdAt?: string
    }
    SignUpRequest: {
      /**
       * @description 회원 이메일
       * @example xxx@naver.com
       */
      email: string
      /**
       * @description 회원 비밀번호
       * @example bboggo1234!
       */
      password: string
      /**
       * @description 회원 이름
       * @example BBOGGO
       */
      name: string
      /**
       * @description 깃허브
       * @example bboggo
       */
      gitHub: string
    }
    ApiResponseSignUpResponse: {
      isSuccess?: boolean
      code?: string
      message?: string
      result?: components['schemas']['SignUpResponse']
    }
    SignUpResponse: {
      /**
       * Format: int64
       * @description 회원 아이디
       * @example 1
       */
      id?: number
      /**
       * @description 회원 이메일
       * @example xxx@naver.com
       */
      email?: string
      /**
       * @description 회원 이름
       * @example BBOGGO
       */
      name?: string
      /**
       * @description 깃허브
       * @example bboggo
       */
      gitHub?: string
      /**
       * @description 회원 닉네임
       * @example 뽀꼬
       */
      nickname?: string
      /**
       * @description 프로필 사진 url
       * @example aaa.com
       */
      imageUrl?: string
    }
    SignInRequest: {
      /**
       * @description 회원 이메일
       * @example xxx@naver.com
       */
      email: string
      /**
       * @description 회원 비밀번호
       * @example bboggo1234!
       */
      password: string
    }
    ApiResponseSignInResponse: {
      isSuccess?: boolean
      code?: string
      message?: string
      result?: components['schemas']['SignInResponse']
    }
    SignInResponse: {
      /**
       * Format: int64
       * @description 회원 아이디
       * @example 1
       */
      id?: number
      /**
       * @description 회원 이메일
       * @example xxx@naver.com
       */
      email?: string
      /**
       * @description 회원 이름
       * @example 김민지
       */
      name?: string
      /**
       * @description 회원 닉네임
       * @example 뽀꼬
       */
      nickname?: string
      /**
       * @description 프로필 사진 url
       * @example aaa.com
       */
      imageUrl?: string
      /**
       * @description 엑세스 토큰
       * @example accessToken
       */
      accessToken?: string
      /**
       * @description 리프레시 토큰
       * @example refreshToken
       */
      refreshToken?: string
    }
    ApiResponseString: {
      isSuccess?: boolean
      code?: string
      message?: string
      result?: string
    }
    ApiResponseObject: {
      isSuccess?: boolean
      code?: string
      message?: string
      result?: Record<string, never>
    }
    ProfileUpdateRequest: {
      /**
       * @description 회원 닉네임
       * @example 뽀꼬
       */
      nickname?: string
      /**
       * @description 프로필 사진 url
       * @example aaa.com
       */
      imageUrl?: string
      /**
       * @description 소개문구
       * @example 간단한 소개글을 작성해보세요!
       */
      introduction?: string
      /**
       * @description 깃허브 링크
       * @example http://github.com/bboggo
       */
      gitHub?: string
      /**
       * @description 포지션
       * @example [
       *       "포지션1",
       *       "포지션2",
       *       "포지션3"
       *     ]
       */
      position?: string[]
      /**
       * @description 기술스택
       * @example [
       *       "태그1",
       *       "태그2",
       *       "태그3"
       *     ]
       */
      techStacks?: string[]
      /**
       * @description 소속
       * @example COMPANY_SCHOOL
       * @enum {string}
       */
      affiliation?: 'COMPANY_SCHOOL' | 'FREELANCER' | 'OTHER'
    }
    ApiResponseProfileUpdateResponse: {
      isSuccess?: boolean
      code?: string
      message?: string
      result?: components['schemas']['ProfileUpdateResponse']
    }
    ProfileUpdateResponse: {
      /**
       * @description 회원 닉네임
       * @example 뽀꼬
       */
      nickname?: string
      /**
       * @description 프로필 사진 url
       * @example aaa.com
       */
      imageUrl?: string
      /**
       * @description 소개문구
       * @example 간단한 소개글을 작성해보세요!
       */
      introduction?: string
      /**
       * @description 깃허브 링크
       * @example http://github.com/bboggo
       */
      gitHub?: string
      /**
       * @description 포지션
       * @example [
       *       "포지션1",
       *       "포지션2",
       *       "포지션3"
       *     ]
       */
      position?: string[]
      /**
       * @description 기술스택
       * @example [
       *       "태그1",
       *       "태그2",
       *       "태그3"
       *     ]
       */
      techStacks?: string[]
      /**
       * @description 소속
       * @example COMPANY_SCHOOL
       * @enum {string}
       */
      affiliation?: 'COMPANY_SCHOOL' | 'FREELANCER' | 'OTHER'
      /**
       * Format: int64
       * @description 포트폴리오 완성률(%)
       * @example 30
       */
      completionRate?: number
    }
    CommunityUpdateRequest: {
      /**
       * @description 커뮤니티 카테고리
       * @example SKILL
       * @enum {string}
       */
      communityCategory: 'SKILL' | 'CAREER' | 'OTHER'
      /**
       * @description 커뮤니티 제목
       * @example 커뮤니티 제목1
       */
      communityTitle: string
      /**
       * @description 커뮤니티 내용
       * @example 커뮤니티 내용1
       */
      communityContent: string
    }
    ApiResponseCommunityUpdateResponse: {
      isSuccess?: boolean
      code?: string
      message?: string
      result?: components['schemas']['CommunityUpdateResponse']
    }
    CommunityUpdateResponse: {
      /**
       * Format: int64
       * @description 커뮤니티 ID
       * @example 1
       */
      id?: number
      /**
       * @description 커뮤니티 카테고리
       * @example SKILL
       * @enum {string}
       */
      communityCategory?: 'SKILL' | 'CAREER' | 'OTHER'
      /**
       * @description 커뮤니티 제목
       * @example 커뮤니티 제목 부분입니다.
       */
      communityTitle?: string
      /**
       * @description 커뮤니티 내용
       * @example 커뮤니티 내용 부분입니다.
       */
      communityContent?: string
      /**
       * Format: int64
       * @description 작성자 ID
       * @example 1
       */
      member?: number
      /**
       * @description 커뮤니티 답변 동의 여부
       * @example true
       */
      isComment?: boolean
      /**
       * Format: date-time
       * @description 작성시간
       */
      createdAt?: string
      /**
       * Format: date-time
       * @description 수정시간
       */
      updatedAt?: string
    }
    ApiResponseListTeamListResponse: {
      isSuccess?: boolean
      code?: string
      message?: string
      result?: components['schemas']['TeamListResponse'][]
    }
    MemberInfo: {
      /**
       * Format: int64
       * @description 멤버 id
       * @example 1
       */
      id?: number
      /**
       * @description 프로필 사진 url
       * @example domain 주소
       */
      imageUrl?: string
      /**
       * @description 멤버 이름
       * @example 김민지
       */
      nickname?: string
    }
    TeamListResponse: {
      /**
       * Format: int64
       * @description 팀 모집 id
       * @example 1
       */
      id?: number
      member?: components['schemas']['MemberInfo']
      /**
       * @description 팀 모집 제목
       * @example 팀 모집 제목입니다.
       */
      teamTitle?: string
      /**
       * @description 팀 모집 내용
       * @example 팀 모집 내용입니다.
       */
      teamContent?: string
      /**
       * @description 팀 모집 타입
       * @example STUDY
       * @enum {string}
       */
      teamType?: 'STUDY' | 'PROJECT' | 'MENTORING'
      /**
       * @description 팀 모집 포지션
       * @example BACKEND
       */
      teamPosition?: string
      /**
       * Format: int64
       * @description 팀 모집 인원
       * @example 1
       */
      teamRecruitmentNum?: number
      /**
       * @description 기술 스택
       * @example [
       *       "Java",
       *       "Spring",
       *       "AWS"
       *     ]
       */
      teamTechStack?: string[]
      /**
       * @description 태그
       * @example [
       *       "태그1",
       *       "태그2",
       *       "태그3"
       *     ]
       */
      teamTags?: string[]
      /**
       * Format: date-time
       * @description 작성시간
       */
      createdAt?: string
      /**
       * @description 모집중 여부
       * @example true
       */
      teamIsActive?: boolean
      /**
       * Format: int64
       * @description 조회수
       * @example 0
       */
      views?: number
      /**
       * Format: int64
       * @description 답변수
       * @example 0
       */
      answers?: number
      /**
       * Format: int64
       * @description 좋아요수
       * @example 0
       */
      likes?: number
    }
    ApiResponseListMemberInfo: {
      isSuccess?: boolean
      code?: string
      message?: string
      result?: components['schemas']['MemberInfo'][]
    }
    ApiResponseTeamMemberListWithIdResponse: {
      isSuccess?: boolean
      code?: string
      message?: string
      result?: components['schemas']['TeamMemberListWithIdResponse']
    }
    TeamMemberListResponse: {
      /**
       * Format: int64
       * @description 팀원 추가 id
       * @example 1
       */
      id?: number
      member?: components['schemas']['MemberInfo']
    }
    TeamMemberListWithIdResponse: {
      /**
       * Format: int64
       * @description 팀 모집 id
       * @example 1
       */
      teamId?: number
      members?: components['schemas']['TeamMemberListResponse'][]
    }
    ApiResponseTeamDetailResponse: {
      isSuccess?: boolean
      code?: string
      message?: string
      result?: components['schemas']['TeamDetailResponse']
    }
    TeamDetailResponse: {
      /**
       * Format: int64
       * @description 팀 모집 id
       * @example 1
       */
      id?: number
      member?: components['schemas']['MemberInfo']
      /**
       * @description 팀 모집 제목
       * @example 팀 모집 제목입니다.
       */
      teamTitle?: string
      /**
       * @description 팀 모집 내용
       * @example 팀 모집 내용입니다.
       */
      teamContent?: string
      /**
       * @description 팀 모집 타입
       * @example STUDY
       * @enum {string}
       */
      teamType?: 'STUDY' | 'PROJECT' | 'MENTORING'
      /**
       * @description 팀 모집 포지션
       * @example BACKEND
       */
      teamPosition?: string
      /**
       * Format: int64
       * @description 팀 모집 인원
       * @example 1
       */
      teamRecruitmentNum?: number
      /**
       * @description 기술 스택
       * @example [
       *       "Java",
       *       "Spring",
       *       "AWS"
       *     ]
       */
      teamTechStack?: string[]
      /**
       * @description 태그
       * @example [
       *       "태그1",
       *       "태그2",
       *       "태그3"
       *     ]
       */
      teamTags?: string[]
      /**
       * Format: date-time
       * @description 작성시간
       */
      createdAt?: string
      /**
       * @description 모집중 여부
       * @example true
       */
      teamIsActive?: boolean
      /**
       * Format: int64
       * @description 조회수
       * @example 0
       */
      views?: number
      /**
       * Format: int64
       * @description 답변수
       * @example 0
       */
      answers?: number
      /**
       * Format: int64
       * @description 좋아요수
       * @example 0
       */
      likes?: number
    }
    ApiResponseListPortfolioListResponse: {
      isSuccess?: boolean
      code?: string
      message?: string
      result?: components['schemas']['PortfolioListResponse'][]
    }
    PortfolioListResponse: {
      /**
       * Format: int64
       * @description 커뮤니티 ID
       * @example 1
       */
      id?: number
      /**
       * @description 포트폴리오 제목
       * @example 김민지의 포트폴리오~~
       */
      portTitle?: string
      /**
       * @description 포지션
       * @example 포지션
       */
      portPosition?: string
      /** @example [
       *       "태그1",
       *       "태그2",
       *       "태그3",
       *       "태그4"
       *     ] */
      tags?: string[]
      /**
       * @description 포트폴리오 이미지 url
       * @example 이미지url
       */
      portImageUrl?: string
      member?: components['schemas']['MemberInfo']
      /**
       * Format: date-time
       * @description 작성시간
       */
      createdAt?: string
      /**
       * Format: int64
       * @description 답변수
       * @example 0
       */
      answers?: number
      /**
       * Format: int64
       * @description 조회수
       * @example 0
       */
      views?: number
      /**
       * Format: int64
       * @description 좋아요수
       * @example 0
       */
      likes?: number
    }
    ApiResponseProfileResponse: {
      isSuccess?: boolean
      code?: string
      message?: string
      result?: components['schemas']['ProfileResponse']
    }
    ProfileResponse: {
      /**
       * Format: int64
       * @description 회원 아이디
       * @example 1
       */
      id?: number
      /**
       * @description 회원 이메일
       * @example xxx@naver.com
       */
      email?: string
      /**
       * @description 회원 이름
       * @example 김민지
       */
      name?: string
      /**
       * @description 회원 닉네임
       * @example 뽀꼬
       */
      nickname?: string
      /**
       * @description 프로필 사진 url
       * @example aaa.com
       */
      imageUrl?: string
      /**
       * @description 소개문구
       * @example 간단한 소개글을 작성해보세요!
       */
      introduction?: string
      /**
       * @description 깃허브 링크
       * @example http://github.com/bboggo
       */
      gitHub?: string
      /**
       * @description 포지션
       * @example [
       *       "포지션1",
       *       "포지션2",
       *       "포지션3"
       *     ]
       */
      position?: string[]
      /**
       * @description 기술스택
       * @example [
       *       "태그1",
       *       "태그2",
       *       "태그3"
       *     ]
       */
      techStacks?: string[]
      /**
       * @description 소속
       * @example COMPANY_SCHOOL
       * @enum {string}
       */
      affiliation?: 'COMPANY_SCHOOL' | 'FREELANCER' | 'OTHER'
      /**
       * Format: int64
       * @description 포트폴리오 완성률(%)
       * @example 30
       */
      completionRate?: number
    }
    ApiResponseListCommunityListResponse: {
      isSuccess?: boolean
      code?: string
      message?: string
      result?: components['schemas']['CommunityListResponse'][]
    }
    CommunityListResponse: {
      /**
       * Format: int64
       * @description 커뮤니티 ID
       * @example 1
       */
      id?: number
      /**
       * @description 커뮤니티 카테고리
       * @example SKILL
       * @enum {string}
       */
      communityCategory?: 'SKILL' | 'CAREER' | 'OTHER'
      /**
       * @description 커뮤니티 제목
       * @example 커뮤니티 제목 부분입니다.
       */
      communityTitle?: string
      /**
       * @description 커뮤니티 내용
       * @example 커뮤니티 내용 부분입니다.
       */
      communityContent?: string
      member?: components['schemas']['MemberInfo']
      /**
       * Format: date-time
       * @description 작성시간
       */
      createdAt?: string
      /**
       * Format: int64
       * @description 답변수
       * @example 0
       */
      answers?: number
      /**
       * Format: int64
       * @description 조회수
       * @example 0
       */
      views?: number
      /**
       * Format: int64
       * @description 좋아요수
       * @example 0
       */
      likes?: number
    }
    ApiResponseCommunityDetailResponse: {
      isSuccess?: boolean
      code?: string
      message?: string
      result?: components['schemas']['CommunityDetailResponse']
    }
    CommunityDetailResponse: {
      /**
       * Format: int64
       * @description 커뮤니티 ID
       * @example 1
       */
      id?: number
      /**
       * @description 커뮤니티 카테고리
       * @example SKILL
       * @enum {string}
       */
      communityCategory?: 'SKILL' | 'CAREER' | 'OTHER'
      /**
       * @description 커뮤니티 제목
       * @example 커뮤니티 제목 부분입니다.
       */
      communityTitle?: string
      /**
       * @description 커뮤니티 내용
       * @example 커뮤니티 내용 부분입니다.
       */
      communityContent?: string
      /**
       * @description 커뮤니티 답변 동의 여부
       * @example true
       */
      isComment?: boolean
      member?: components['schemas']['MemberInfo']
      /**
       * Format: date-time
       * @description 작성시간
       */
      createdAt?: string
      /**
       * Format: int64
       * @description 답변수
       * @example 0
       */
      answers?: number
      /**
       * Format: int64
       * @description 조회수
       * @example 0
       */
      views?: number
      /**
       * Format: int64
       * @description 좋아요수
       * @example 0
       */
      likes?: number
    }
    ApiResponseListCommunityTop5Response: {
      isSuccess?: boolean
      code?: string
      message?: string
      result?: components['schemas']['CommunityTop5Response'][]
    }
    CommunityTop5Response: {
      member?: components['schemas']['MemberInfo']
      /**
       * Format: int64
       * @description 해당 유저가 받은 전체 좋아요수
       * @example 22
       */
      totalLikes?: number
    }
    ApiResponseMemberInfoResponse: {
      isSuccess?: boolean
      code?: string
      message?: string
      result?: components['schemas']['MemberInfoResponse']
    }
    MemberInfoResponse: {
      /**
       * Format: int64
       * @description 회원 아이디
       * @example 1
       */
      id?: number
      /**
       * @description 회원 이메일
       * @example xxx@naver.com
       */
      email?: string
      /**
       * @description 회원 이름
       * @example 김민지
       */
      name?: string
      /**
       * @description 회원 닉네임
       * @example 뽀꼬
       */
      nickname?: string
      /**
       * @description 프로필 사진 url
       * @example aaa.com
       */
      imageUrl?: string
    }
  }
  responses: never
  parameters: never
  requestBodies: {
    MultipartFile: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          file?: string
        }
      }
    }
  }
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  getTeamList: {
    parameters: {
      query?: {
        searchTerm?: string
        teamType?: 'STUDY' | 'PROJECT' | 'MENTORING'
        positions?: string[]
        techStacks?: string[]
        sortBy?: string
        teamIsActive?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseListTeamListResponse']
        }
      }
    }
  }
  createTeam: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TeamCreateRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseTeamCreateResponse']
        }
      }
    }
  }
  addMemberToTeam: {
    parameters: {
      query?: never
      header?: never
      path: {
        teamId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TeamAddMemberRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseTeamAddMemberResponse']
        }
      }
    }
  }
  getPortfolioList: {
    parameters: {
      query?: {
        position?: string
        searchTerm?: string
        sortBy?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseListPortfolioListResponse']
        }
      }
    }
  }
  createPortfolio: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PortfolioCreateRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponsePortCreateResponse']
        }
      }
    }
  }
  addLike: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['LikeRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseLikeResponse']
        }
      }
    }
  }
  getCommunityList: {
    parameters: {
      query?: {
        category?: 'SKILL' | 'CAREER' | 'OTHER'
        searchTerm?: string
        sortBy?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseListCommunityListResponse']
        }
      }
    }
  }
  createCommunity: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CommunityCreateRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseCommunityCreateResponse']
        }
      }
    }
  }
  createMember: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SignUpRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseSignUpResponse']
        }
      }
    }
  }
  signIn: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SignInRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseSignInResponse']
        }
      }
    }
  }
  Test: {
    parameters: {
      query: {
        test: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseString']
        }
      }
    }
  }
  createRefreshToken: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': string
        }
      }
    }
  }
  recreateAccessToken: {
    parameters: {
      query: {
        oldAccessToken: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': string
        }
      }
    }
  }
  createAccessToken: {
    parameters: {
      query: {
        userSpecification: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': string
        }
      }
    }
  }
  closeRecruitment: {
    parameters: {
      query?: never
      header?: never
      path: {
        teamId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseObject']
        }
      }
    }
  }
  getProfileInfo: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseProfileResponse']
        }
      }
    }
  }
  updateProfileInfo: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ProfileUpdateRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseProfileUpdateResponse']
        }
      }
    }
  }
  getCommunityDetail: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseCommunityDetailResponse']
        }
      }
    }
  }
  deleteCommunity: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseObject']
        }
      }
    }
  }
  updateCommunity: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CommunityUpdateRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseCommunityUpdateResponse']
        }
      }
    }
  }
  validateToken: {
    parameters: {
      query: {
        token: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': string
        }
      }
    }
  }
  searchMembers: {
    parameters: {
      query?: {
        nickname?: string
      }
      header?: never
      path: {
        teamId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseListMemberInfo']
        }
      }
    }
  }
  getTeamMembers: {
    parameters: {
      query?: never
      header?: never
      path: {
        teamId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseTeamMemberListWithIdResponse']
        }
      }
    }
  }
  getTeamDetail: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseTeamDetailResponse']
        }
      }
    }
  }
  deleteTeam: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseObject']
        }
      }
    }
  }
  getTop5UsersByTotalLikes: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseListCommunityTop5Response']
        }
      }
    }
  }
  getMemberInfo: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseMemberInfoResponse']
        }
      }
    }
  }
  deleteTeamMember: {
    parameters: {
      query?: never
      header?: never
      path: {
        teamId: number
        memberId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ApiResponseObject']
        }
      }
    }
  }
}
